[[{"l":"Getting started","p":["Welcome to workleap/telemetry, a collection of telemetry libraries for building web applications at Workleap. On this getting started page, you'll find an overview of the project and a list of supported platforms."]},{"l":"An integrated experience","p":["Without a unified and cohesive telemetry setup, debugging issues or analyzing product behavior often requires jumping between tools with disconnected data. Session replays in LogRocket, traces in Honeycomb, and user events in Mixpanel each offer valuable insights, but without shared identifiers or cross-platform context, it becomes difficult to correlate events, reconstruct user journeys, or measure the full impact of a technical issue in production.","This integrated experience brings together LogRocket, Honeycomb, and Mixpanel. By linking session data, performance traces, and user interactions through consistent identifiers. It becomes possible to trace a single application event across systems, from backend performance to frontend behavior to product impact. This integration streamlines will hopefully enables faster, and more informed decision-making."]},{"l":"Supported platforms","p":["Name","Description","NPM","Documentation","LogRocket","Records frontend sessions and logs to help debug and resolve issues in production and surface critical issues.","npm version","Getting started","Honeycomb","Captures and analyzes distributed traces and metrics to understand and monitor complex systems, application behaviors, and performance.","Mixpanel","Tracks user interactions to analyze behavior and measure product impact.","Common Room","Connects user activity across platforms to provide insight into community engagement and behavior.(Common Room is not part of the integrated experience, as it is a standalone tool used by marketers for a completely different purpose.)"]},{"l":"Setup a project","p":["First, open a terminal at the root of the application and install the telemetry libraries packages:","Then, update the application bootstrapping code to initialize the libraries:","For more information about a specific library, refer to its getting started guide.","For Honeycomb, avoid using /.+/g, in production, as it could expose customer data to third parties. Instead, ensure you specify values that accurately matches your application's backend URLs."]},{"l":"Correlation ids","p":["Each library sends the same two correlation id values to its respective platform, using platform-specific naming conventions for the names:","Correlation id","Description","LogRocket","Honeycomb","Mixpanel","Telemetry id","Identifies a single application load. It's primarily used to correlate all telemetry platforms with Honeycomb traces.","app.telemetry_id","Device id","Identifies the user's device across sessions.","app.device_id"]},{"l":"Troubleshooting example","p":["The following is an example of a troubleshooting workflow using the new telemetry correlation id:","Honeycomb: Locate the app.telemetry_id attribute in a trace to retrieve its value.","LogRocket: Navigate to the \"Session Replay\" page. Open the \"User Traits\" filter, select the Telemetry Id trait, paste the app.telemetry_id value, and press \"Enter\" to view the matching sessions.","Mixpanel: Navigate to the \"Events\" page. Add a \"filter\", select the Telemetry Id propertt, paste the app.telemetry_id value, and press on the \"Add\" button to view the matching events.","This feature is available only when using the following package versions or higher:","@workleap/logrocket≥ 1.0.0","@workleap/honeycomb≥ 6.0.0","@workleap/mixpanel≥ 2.0.0","If your application is using older versions, refer to the migration guide to update."]},{"l":"LogRocket session URL","p":["In addition to the correlation ids, if LogRocket instrumentation is initialized, the Honeycomb and Mixpanel libraries will automatically enrich their data with the LogRocket session URL once it's available:","Honeycomb","Mixpanel","app.logrocket_session_url","This feature is available only when using the following package versions or higher:","@workleap/logrocket≥ 1.0.0","@workleap/honeycomb≥ 6.0.0","@workleap/mixpanel≥ 2.0.0","If your application is using older versions, refer to the migration guide to update."]},{"l":"Set up loggers","p":["Providing loggers to the registration and initialization functions is optional, but recommended to simplify troubleshooting.","To troubleshoot an issue in production, remove the LogLevel from the LogRocketLogger constructor options and set the verbose option to true:"]},{"l":"Migrate","p":["To benefit from the new unified and cohesive telemetry setup, follow the migration guide."]}],[{"l":"Migrate","p":["To benefit from the new unified and cohesive telemetry setup, an application must use at least the following minimum versions of each library:","Name","Minimum version","Migration guide","LogRocket","≥ v1.0.0","Migrate to v1.0","Honeycomb","≥ v6.0.0","Migrate to v6.0","Mixpanel","≥ v2.0.0","Migration to v2.0"]}],[{"l":"Getting started","p":["To gain full visibility into frontend behavior in production, Workleap has adopted LogRocket, a tool that combines session replay, performance tracking, and error logging to help understand and resolve issues in production.","This package provides default LogRocket instrumentation tailored to Workleap's applications' needs, including the removal of sensitive information from HTML documents, HTTP requests/responses and URLs."]},{"l":"Install the packages","p":["First, open a terminal at the root of the application and install the following packages:"]},{"l":"Register instrumentation","p":["Then, register LogRocket instrumentation using the registerLogRocketInstrumentation function:"]},{"l":"Session replays","p":["With instrumentation in place, session replays are now available in LogRocket:","Available session replays","Session replays offer a wide range of features to help debug production issues, including the following \uD83D\uDC47"]},{"l":"Playback"},{"l":"Console logs"},{"l":"Network requests"},{"l":"DOM interactions"},{"l":"Record elements","p":["By default, this instrumentation sanitizes all user-provided text inputs and content. This includes:","Form fields (like input, textarea)","Text content inside HTML elements","Dynamic DOM mutations containing text","Use data-public to explicitly allow LogRocket to record the content of an element. When this attribute is present, the content inside the element (including child elements) will be captured in the session replay:","To learn more about the built-in privacy settings of this instrumentation, refer to the Privacy page."]},{"l":"Identify a user","p":["Most applications need to identify the current user environment. To help with that, @workleap/logrocket exposes the createDefaultUserTraits function. When used with LogRocket.identify, it provides all the tools to identify a user with the key information that we track at Workleap.","Update your application bootstrapping code to include the createDefaultUserTraits and LogRocket.identify functions:"]},{"l":"Get the session URL","p":["Every session replay is associated with a unique URL. To register a callback receiving the session replay once it's available, use the LogRocket.getSessionURL function:"]},{"l":"Capture logs","p":["By default, Workleap's LogRocket configuration does not capture console logs. To send loggers output to LogRocket, use the LogRocketLogger class.","Console logs are not captured by default to reduce the risk of exposing Personally Identifiable Information (PII) in LogRocket session replays.","To troubleshoot an issue in production, remove the LogLevel from the LogRocketLogger constructor options and set the verbose option to true:"]},{"i":"try-it-rocket","l":"Try it \uD83D\uDE80","p":["Start the application in a development environment using the dev script. Render a page, then navigate to your LogRocket instance. Go to \"Session Replay\" page, you should see a new session appear.","You can try filtering the session list using different user traits, such as:","User Id","Organization Id","Is Admin"]},{"l":"Troubleshoot issues","p":["If you are experiencing issues with this guide:","Set the verbose predefined option to true.","Open the DevTools console and look for logs starting with [logrocket].","Refer to the sample on GitHub."]},{"l":"Filter by correlation ids","p":["The registerLogRocketInstrumentation function automatically adds two user traits to every session replay to unify LogRocket with the other telemetry platforms:","Telemetry Id: Identifies a single application load. It's primarily used to correlate with Honeycomb traces.","Device Id: Identifies the user's device across sessions. This value is extracted from the shared wl-identity cookie, which is used across Workleap's marketing sites and web applications.","To correlate a session with other telemetry platforms, filter the session list using these user traits."]},{"l":"Migrate","p":["To migrate from the @workleap-tracking/logrocket package and benefit from the new integrated experience, follow the migration guide for v1.0."]}],[{"l":"Privacy","p":["By default, this instrumentation hides a wide range of Personally Identifiable Information (PII) from session replays to protect user privacy:","LogRocket's DOM sanitization hide sensitive text elements from session replays.","LogRocket's network data sanitization strip sensitive information from request/response headers and body from session replays.","LogRocket's URLs sanitization strip sensitive information from URLs' query parameters exposed in session replays."]},{"l":"Record elements","p":["Use data-public to explicitly allow LogRocket to record the content of an element. When this attribute is present, the content inside the element, including child elements, will be captured in the session replay:"]},{"l":"Block elements","p":["To prevent an element and its child elements from being recorded, use the data-private attribute.. This is especially useful when you want to selectively exclude sensitive parts of an element tree while allowing others to be captured."]}],[{"l":"Best practices"},{"l":"Log relevant information","p":["It's recommended to log as much relevant information as possible into the LogRocket session replay console. This is typically done using the LogRocketLogger class or directly through the LogRocket SDK.","At minimum, make sure to provide a LogRocketLogger instance to Workleap's libraries accepting a loggers option.","Here are some examples \uD83D\uDC47","Never log any Personally Identifiable Information (PII).","API responses frequently contain sensitive user data such as names, email addresses, phone numbers, or IDs. Remove all logs outputting API response before deploying to production, as these can expose private information that will be included in session replays.","For debugging, use console.log instead, since its output is not captured in LogRocket session replays."]},{"l":"LogRocket","p":["Register LogRocket instrumentation with a LogRocketLogger instance:"]},{"l":"Honeycomb","p":["Register Honeycomb instrumentation with a LogRocketLogger instance:"]},{"l":"Mixpanel","p":["Initialize Mixpanel with a LogRocketLogger instance:"]},{"l":"Common Room","p":["Initialize Mixpanel with a LogRocketLogger instance:"]},{"l":"Squide firefly","p":["Initialize Squide firefly with a LogRocketLogger instance:"]},{"l":"Platform widgets","p":["Initialize platform widgets with verbose mode activated and a LogRocketLogger instance:"]}],[{"l":"Reference","p":["registerLogRocketInstrumentation","createDefaultUserTraits","LogRocketLogger"]}],[{"l":"registerLogRocketInstrumentation","p":["Initializes LogRocket instrumentation with Workleap's default settings."]},{"l":"Reference"},{"l":"Parameters","p":["appId: The LogRocket application id.","options: An optional object literal of predefined options."]},{"l":"Returns","p":["Nothing"]},{"l":"Predefined options","p":["The registerLogRocketInstrumentation(appId, options?: {}) function also accepts a few predefined options \uD83D\uDC47"]},{"l":"rootHostname","p":["Type: string","Default: workleap.com","A root hostname to track sessions across subdomains."]},{"l":"privateFieldNames","p":["Type: string[]","Default: undefined","Names of additional fields to exclude from session replays. These fields will be removed from network requests, responses using a fuzzy-matching algorithm.","To view the default private fields, have a look at the registerLogRocketInstrumentation.ts file on GitHub."]},{"l":"privateQueryParameterNames","p":["Type: string[]","Default: undefined","Names of additional fields to exclude from session replays. These fields will be removed from query parameters using a fuzzy-matching algorithm.","To view the default private query parameters, have a look at the registerLogRocketInstrumentation.ts file on GitHub."]},{"l":"verbose","p":["Type: boolean","Default: false","If no loggers are configured, verbose mode will automatically send logs to the console. In some cases, enabling verbose mode also produces additional debug information."]},{"l":"loggers","p":["Type: RootLogger[]","Default: undefined","The logger instances that will output messages."]},{"l":"Configuration transformers","p":["We do not guarantee that your configuration transformers won't break after an update. It's your responsibility to keep them up to date with new releases.","The predefined options are useful to quickly customize the default configuration of the LogRocket SDK, but only covers a subset of the options. If you need full control over the configuration, you can provide configuration transformer functions through the transformers option of the registerLogRocketInstrumentation function. Remember, no locked in❤️✌️.","To view the default configuration of registerLogRocketInstrumentation, have a look at the registerLogRocketInstrumentation.ts file on GitHub."]},{"l":"transformers","p":["Type: ((options: LogRocketSdkOptions, context: LogRocketSdkOptionsTransformer) = LogRocketSdkOptions)[]","Default: []"]},{"l":"Execution context","p":["Generic transformers can use the context argument to gather additional information about their execution context:","verbose: boolean","logger: Logger"]}],[{"l":"createDefaultUserTraits","p":["Creates an object containing the default user traits used to identify a user in a Workleap web application."]},{"l":"Reference"},{"l":"Parameters","p":["identification: An object that uniquely identifies the current user and provide additional context about the user environment.","isAdmin: Whether or not the user is an administrator in the current workspace.","isCollaborator: An optional object including boolean values indicating whether or not the user is a collaborator for specific product:","isExecutive: An optional object including boolean values indicating whether or not the user is an executive for specific product:","isMigratedToWorkleap: Whether or not this user's organization has been migrated to use the WLP, or if the user has signed up to the new experience directly.","isOrganizationCreator: An optional value indicating whether or not the user originally signed up to create the workspace.","isReportingManager: An optional value indicating whether or not the user is a reporting manager in the current workspace.","isTeamManager: An optional value indicating whether or not the user is a team manager in the current workspace.","lms: An optional value indicating the user plan code for LMS.","lms: An optional value indicating whether or not the user is an LMS collaborator.","lms: An optional value indicating whether or not the user is an LMS executive.","onb: An optional value indicating the user plan code for Onboarding.","onb: An optional value indicating whether or not the user is an Onboarding collaborator.","onb: An optional value indicating whether or not the user is an Onboarding executive.","organizationId: The organization's unique id.","organizationName: The organization name.","pbd: An optional value indicating the user plan code for Pingboard.","pbd: An optional value indicating whether or not the user is a Pingboard collaborator.","pbd: An optional value indicating whether or not the user is a Pingboard executive.","planCode: An optional object including string values indicating the user plan code for specific product:","sks: An optional value indicating the user plan code for Skills.","sks: An optional value indicating whether or not the user is a Skills collaborator.","sks: An optional value indicating whether or not the user is a Skills executive.","userId: A value that uniquely identifies the current user.","wov: An optional value indicating the user plan code for Officevibe.","wov: An optional value indicating whether or not the user is an Officevibe collaborator.","wov: An optional value indicating whether or not the user is an Officevibe executive.","wpm: An optional value indicating the user plan code for Performance.","wpm: An optional value indicating whether or not the user is a Performance collaborator.","wpm: An optional value indicating whether or not the user is a Performance executive."]},{"l":"Returns","p":["A value that uniquely identifies the current user.(in case of multiple workspaces, this id would be different per workspace) ex. fa88ed6b-9ff4-48a0-b3a6-cee17b4855e9","An object including the default user traits matching the provided identification values:","Description","Indicates the plan code for the corresponding product in the workspace. ex. wov-essential-monthly-std","Is Admin","Is Collaborator","Is Collaborator - Officevibe Is Collaborator - LMS Is Collaborator - Onboarding Is Collaborator - Pingboard Is Collaborator - Skills Is Collaborator - Performance","Is Executive","Is Executive - Officevibe Is Executive - LMS Is Executive - Onboarding Is Executive - Pingboard Is Executive - Skills Is Executive - Performance","Is Migrated To Workleap","Is Organization Creator","Is Reporting Manager","Is Team Manager","Organization Id","Organization Name","Plan Code - Officevibe Plan Code - LMS Plan Code - Onboarding Plan Code - Pingboard Plan Code - Skills Plan Code - Performance","The organization's id.(in case of multiple workspaces, this id would be different per workspace) ex. 6a3f4a88-b4bd-42cf-b404-7fd83ec1808d","The organization's name.","true if the user is an administrator in the current workspace.","true if the user originally signed up to create the workspace.","true if this user is a collaborator in any product in the current workspace.","true if this user is a collaborator in the corresponding product in the current workspace.","true if this user is a reporting manager in the current workspace.","true if this user is a team manager in the current workspace.","true if this user is an executive in any product in the current workspace.","true if this user is an executive of the corresponding product in the current workspace.","true if this user's organization has been migrated to use the WLP, or if the user has signed up to the new experience directly.","User Id","User Trait Name"]},{"l":"Usage"},{"l":"Get default traits"},{"l":"Send additional traits","p":["You can send custom user traits to improve filtering in LogRocket. To do so, merge the default user traits with your additional traits before sending them:","Additional user trait names should align with Mixpanel property conventions. We recommend using human-readable names and appending a - {ProductName} suffix for product-specific traits, for example: Plan Code - Officevibe."]}],[{"l":"LogRocketLogger","p":["A logger outputting messages to a LogRocket session replay."]},{"l":"Reference"},{"l":"Parameters","p":["options: An optional object literal of options:","logLevel: Sets the minimum severity of entries the logger will process. Possible values are debug, information, warning, error, critical."]},{"l":"Methods","p":["Refer to the Logger and LoggerScope documentation."]},{"l":"Usage"},{"l":"Log a debug entry"},{"l":"Log an information entry"},{"l":"Log a warning entry"},{"l":"Log an error entry"},{"l":"Log a critical entry"},{"l":"Filter log entries","p":["A minimum severity of entries to process can be configured as an option. Messages with a lower severity than the configured level will then be ignored.","For reference, here's a description of each level:"]},{"l":"Debug","p":["Very detailed, often verbose, logs used mainly during development.","Example: API request/response bodies, lifecycle hooks, variable state."]},{"l":"Information","p":["General events that show the normal flow of the application.","Example: User login, component mounted, scheduled task started."]},{"l":"Warning","p":["Non-critical issues that might need attention but don't break functionality.","Example: Deprecated API usage, retries after a failed network call."]},{"l":"Error","p":["Failures that prevent part of the system from working as intended.","Example: Unhandled exceptions, failed database query, API call failed with 500."]},{"l":"Critical","p":["Severe errors that cause the application to stop functioning or risk data integrity.","Example: Application crash, loss of critical service connection."]},{"l":"Build complex log entry","p":["Multiple segments can be chained to create a log entry that combines styled text, errors, and objects. To process all segments and output the log to the console, complete the chain by calling any log method."]},{"l":"Use a logging scope"},{"l":"Dismiss a logging scope","p":["A scope can be dismissed to prevent it's log entries from being outputted to the console."]}],[{"l":"Updating","p":["Migrate to v1.0"]}],[{"l":"Migrate to v1.0","p":["This rewrite of Workleap's LogRocket instrumentation focuses on leveraging the native LogRocket library directly, rather than abstracting it away and on adding two correlation ids, telemetryId and deviceId, to help unify and correlate data across LogRocket, Honeycomb and Mixpanel. Finally a new built-in integration allow other telemetry libraries to automatically add the LogRocket session replay URL to their traces/events.","Follow this guide to migrate from @workleap-tracking/logrocket\uD83D\uDC47"]},{"l":"Breaking changes","p":["\uD83D\uDEA8 The new package name is @workleap/logrocket."]},{"l":"Removed","p":["The registerAnonymousLogRocketInstrumentation function doesn't exist anymore, use registerLogRocketInstrumentation instead.","The getTrackingIdentifier function doesn't exist anymore. A similar identifier is now automatically added as a user trait for every session replay.","The registerLogRocketInstrumentation function trackingIdentifier, identifyOptions and onSessionUrlInitialized options doesn't exist anymore."]},{"l":"Renamed","p":["The WorkleapLogRocketIdentification TypeScript interface has been renamed to LogRocketIdentification.","The WorkleapUserTraits TypeScript interface has been renamed to LogRocketUserTraits."]},{"l":"Others","p":["The logrocket package is a new peer dependency of the @workleap/logrocket package."]},{"l":"Changes to registerLogRocketInstrumentation","p":["The getTrackingIdentifier function and trackingIdentifier option do not exist anymore. A similar identifier is now automatically added as a user trait for every session replay.","The identifyOptions option has been removed, use createDefaultUserTraits and the native LogRocket.identify function instead.","The onSessionUrlInitialized option has been removed, use the native LogRocket.getSessionURL function instead.","The function arguments changed from (options: {}) to (appId, options: {}).","Before:","After:"]},{"l":"Removed registerAnonymousLogRocketInstrumentation","p":["The registerAnonymousLogRocketInstrumentation function doesn't exist anymore, use registerLogRocketInstrumentation instead.","Before:","After:"]},{"l":"Add new dependencies","p":["Add the logrocket dependency to the host application."]},{"l":"Improvements"},{"l":"Correlation ids","p":["To help unify and correlate data across LogRocket, Honeycomb, and Mixpanel, the registerLogRocketInstrumentation function now automatically adds two correlation ids as user traits to every session replay:","telemetryId is a new identifier that represents a single application load.","deviceId replaces the former trackingId and reuses the original name from the wl-identity cookie, better reflecting its purpose as a persistent device identifier."]},{"l":"Session URL enrichment","p":["A built-in integration now automatically allows other telemetry libraries to include the LogRocket session replay URL in their traces or events.","For example, with the Honeycomb integration, once the LogRocket session URL is retrieved, each trace is enriched with an app.logrocket_session_url attribute:","Honeycomb enrichment example"]},{"l":"Migrate from @workleap-tracking/logrocket","p":["Follow these steps to migrate an existing application @workleap-tracking/logrocket to @workleap/logrocket:","Rename registerAnonymousLogRocketInstrumentation to registerLogRocketInstrumentation.","Remove all usage of getTrackingIdentifier. The new registerLogRocketInstrumentation function automatically sets the tracking identifier as a correlation id under the Device Id name.","Remove the trackingIdentifier and identifyOptions options. To identify a user, use createDefaultUserTraits in combination to LogRocket.identify. View example","Replace the onSessionUrlInitialized option with the LogRocket.getSessionUrl function. View example","Rename any instances of WorkleapLogRocketIdentification to LogRocketIdentification.","Rename any instances of WorkleapUserTraits to LogRocketUserTraits."]}],[{"l":"Samples","p":["All platforms sample"]}],[{"l":"Getting started","p":["To monitor application performance, Workleap has adopted Honeycomb, a tool that helps teams capture and analyze distributed traces and metrics to understand and monitor complex systems, application behaviors, and performance. Built on OpenTelemetry, Honeycomb provides a robust API for frontend telemetry.","While Honeycomb's in-house HoneycombWebSDK includes great default instrumentation, this package provides a slightly altered default instrumentation which is adapted for Workleap's applications' requirements."]},{"l":"Install the packages","p":["First, open a terminal at the root of the application and install the following packages:"]},{"l":"Register instrumentation","p":["Then, update the application bootstrapping code to register Honeycomb instrumentation using the registerHoneycombInstrumentation function:","Avoid using /.+/g, in production, as it could expose customer data to third parties. Instead, ensure you specify values that accurately matches your application's backend URLs.","We recommend using an OpenTelemetry collector with an authenticated proxy over an ingestion API key, as API keys can expose Workleap to potential attacks.","With instrumentation in place, a few traces are now available \uD83D\uDC47"]},{"l":"Fetch requests","p":["Individual fetch request performance can be monitored from end to end:","Fetch instrumentation"]},{"l":"Document load","p":["The loading performance of the DOM can be monitored:","Document load instrumentation"]},{"l":"Unmanaged error","p":["When an unmanaged error occurs, it's automatically recorded:","Recorded error"]},{"l":"Real User Monitoring (RUM)","p":["The default instrumentation will automatically track the appropriate metrics to display RUM information:","Largest Contentful Paint","Cumulative Layout Shift","Interaction to Next Paint"]},{"l":"LogRocket session URL","p":["If LogRocket instrumentation is registered, Honeycomb traces are enriched with the LogRocket session URL as soon as it becomes available:"]},{"l":"Correlation ids","p":["The registerLogRocketInstrumentation function automatically adds two attributes to every trace:","app.telemetry_id: Identifies a single application load. It's primarily used to correlate Honeycomb traces with the other telemetry platforms.","app.device_id: Identifies the user's device across sessions. This value is extracted from the shared wl-identity cookie, which is used across Workleap's marketing sites and web applications.","app.telemetry_id attribute app_device_id attribute"]},{"l":"Set custom user attributes","p":["Most applications need to set custom attributes on traces about the current user environment. To help with that, @workleap/honeycomb expose the setGlobalSpanAttributes function.","Update your application code to include the setGlobalSpanAttribute function:","Now, every trace recorded after the execution of setGlobalSpanAttribute will include the custom attribute app.user_id:","Custom attributes"]},{"l":"Custrom traces","p":["Have a look at the custom traces page."]},{"i":"try-it-rocket","l":"Try it \uD83D\uDE80","p":["Start the application in a development environment using the dev script. Render a page, then navigate to your Honeycomb instance. Go to the \"Query\" page and type name = HTTP GET into the \"Where\" input. Run the query, select the \"Traces\" tab at the bottom of the page and view the detail of a trace. You should view information about the request."]},{"l":"Troubleshoot issues","p":["If you are experiencing issues with this guide:","Set the verbose predefined option to true.","Open the DevTools console. Look for logs starting with [honeycomb].","You should also see a log entry for every Honeycomb traces.","honeycombio/opentelemetry-web: Honeycomb link: https://ui.honeycomb.io/...","Refer to the sample on GitHub."]},{"l":"Filter by correlation ids","p":["The registerLogRocketInstrumentation function automatically adds two user traits to every session replay to unify LogRocket with the other telemetry platforms:","app.telemetry_id: Identifies a single application load. It's primarily used to correlate Honeycomb traces with the other telemetry platforms.","app.device_id: Identifies the user's device across sessions. This value is extracted from the shared wl-identity cookie, which is used across Workleap's marketing sites and web applications.","To correlate a session with other telemetry platforms, filter the query with the app.telemetry_id or app.device_id fields into the \"Where\" input."]},{"l":"Migrate","p":["To benefit from the new integrated experience, follow the migration guide for v6.0."]}],[{"l":"Custom traces","p":["Applications are expected to use the OpenTelemetry API to send custom traces to Honeycomb:"]}],[{"l":"Reference","p":["registerHoneycombInstrumentation","setGlobalSpanAttributes"]}],[{"l":"registerHoneycombInstrumentation","p":["Initializes an instance of Honeycomb Web SDK with Workleap's default settings."]},{"l":"Reference"},{"l":"Parameters","p":["namespace: The service namespace. Will be added to traces as a service.namespace custom attribute.","serviceName: Honeycomb application service name.","apiServiceUrls: A RegExp or string that matches the URLs of the application's backend services. If unsure, start with the temporary regex /.+/g, to match all URLs.","options: An optional object literal of predefined options."]},{"l":"Returns","p":["Nothing"]},{"l":"Default instrumentation","p":["The registerHoneycombInstrumentation function registers the following OpenTelemetry instrumentations by default:","@opentelemetry/instrumentation-fetch","@opentelemetry/instrumentation-document-load","For more details, refer to the registerHoneycombInstrumentation.ts file on GitHub."]},{"l":"Customize backend URLs","p":["Avoid using /.+/g, in production as it could expose customer data to third parties.","Specify values for the apiServiceUrls argument that matches your application's backend URLs. For example, if your backend services are hosted at https://workleap.com/api:"]},{"l":"Predefined options","p":["The registerHoneycombInstrumentation(namespace, serviceName, apiServiceUrls, options) function can be used as shown in the previous example, however, if you wish to customize the default configuration, the function also accepts a few predefined options to help with that \uD83D\uDC47"]},{"l":"proxy","p":["Type: string","Default: undefined","Set the URL to an OpenTelemetry collector proxy. Either proxy or apiKey option must be provided.","When a proxy option is provided, the current session credentials are automatically sent with the OTel trace requests."]},{"l":"apiKey","p":["Prefer using an OpenTelemetry collector with an authenticated proxy over an ingestion API key, as API keys can expose Workleap to potential attacks.","Set an Honeycomb ingestion API key. Either proxy or apiKey option must be provided.","Type: string","Default: undefined"]},{"l":"instrumentations","p":["Type: An array of instrumentation objects","Default: []","Append the provided instrumentation instances to the configuration."]},{"l":"spanProcessors","p":["Type: An array of span processor objects","Default: []","Append the provided span processor instances to the configuration."]},{"l":"fetchInstrumentation","p":["Type: false or (defaultOptions: FetchInstrumentationConfig) = FetchInstrumentationConfig","Default: { ... }","Replace the default @opentelemetry/instrumentation-fetch options by providing a function that returns an object literal with the desired options. This function will receive an object literal containing the default options, which you can either extend or replace.","To disable @opentelemetry/instrumentation-fetch, set the option to false."]},{"l":"documentLoadInstrumentation","p":["Type: false or (defaultOptions: DocumentLoadInstrumentationConfig) = DocumentLoadInstrumentationConfig","Default: { ... }","Replace the default @opentelemetry/instrumentation-document-load options by providing a function that returns an object literal with the desired options. This function will receive an object literal containing the default options, which you can either extend or replace.","To disable @opentelemetry/instrumentation-document-load, set the option to false."]},{"l":"xmlHttpRequestInstrumentation","p":["Type: boolean or (defaultOptions: XMLHttpRequestInstrumentationConfig) = XMLHttpRequestInstrumentationConfig","Default: false","By default, @opentelemetry/instrumentation-xml-http-request is disabled. To enable this instrumentation, provide a function that returns an object literal with the desired options. This function will receive an object literal of default options, which you can extend or replace as needed.","Or set the option to true to enable @opentelemetry/instrumentation-xml-http-request with the default options."]},{"l":"userInteractionInstrumentation","p":["Type: boolean or (defaultOptions: UserInteractionInstrumentationConfig) = UserInteractionInstrumentationConfig","Default: false","By default, @opentelemetryinstrumentation-user-interaction is disabled. To enable this instrumentation, provide a function that returns an object literal with the desired options. This function will receive an object literal of default options, which you can extend or replace as needed.","Or set the option to true to enable @opentelemetryinstrumentation-user-interaction with the default options."]},{"l":"verbose","p":["Type: boolean","Default: false","If no loggers are configured, verbose mode will automatically send logs to the console. In some cases, enabling verbose mode also produces additional debug information."]},{"l":"loggers","p":["Type: RootLogger[]","Default: undefined","The logger instances that will output messages."]},{"l":"Configuration transformers","p":["We do not guarantee that your configuration transformers won't break after an update. It's your responsibility to keep them up to date with new releases.","The predefined options are useful to quickly customize the default configuration of the Honeycomb Web SDK, but only covers a subset of the options. If you need full control over the configuration, you can provide configuration transformer functions through the transformers option of the registerHoneycombInstrumentation function. Remember, no locked in❤️✌️.","To view the default configuration of registerHoneycombInstrumentation, have a look at the registerHoneycombInstrumentation.ts file on GitHub."]},{"l":"transformers","p":["Type: ((options: HoneycombSdkOptions, context: HoneycombSdkOptionsTransformerContext) = HoneycombSdkOptions)[]","Default: []"]},{"l":"Execution context","p":["Generic transformers can use the context argument to gather additional information about their execution context:","verbose: boolean","logger: Logger"]}],[{"l":"setGlobalSpanAttributes","p":["Set global attributes to be included in all traces."]},{"l":"Reference"},{"l":"Parameters","p":["attributes: The attributes to include in every trace."]},{"l":"Returns","p":["Nothing"]},{"l":"Usage"}],[{"l":"Updating","p":["Migrate to v6.0"]}],[{"l":"Migrate to v6.0","p":["This new version introduces two correlation ids, telemetryId and deviceId, to help unify and correlate data across LogRocket, Honeycomb and Mixpanel and a new automatic enrichment of the traces with the LogRocket session url if the LogRocket instrumentation is registered."]},{"l":"Improvements"},{"l":"Correlation ids","p":["To help unify and correlate data across LogRocket, Honeycomb, and Mixpanel, the registerHoneycombInstrumentation function now automatically adds two correlation ids as attributes to every trace:","telemetryId is an identifier that represents a single application load.","deviceId is an identifier that represents a single device across multiple loads."]},{"l":"Session URL enrichment","p":["A built-in integration now automatically allows other telemetry libraries to include the LogRocket session replay URL in their traces.","Once the LogRocket session URL is retrieved, each trace is enriched with an app.logrocket_session_url attribute:","Enrichment example"]}],[{"l":"Samples","p":["All platforms sample","Honeycomb api key sample","Honeycomb proxy sample"]}],[{"l":"Getting started","p":["To make data-informed decisions, understand user behavior, and measure product impact, Workleap has adopted Mixpanel, an analytics platform that helps understand how users interact with a product.","This package add basic Mixpanel tracking capabilities to an application. It provides a single track function that sends POST requests to a dedicated tracking endpoint compliant with the Workleap platform tracking API."]},{"l":"Install the packages","p":["First, open a terminal at the root of the application and install the following packages:"]},{"l":"Initialize Mixpanel","p":["Then, initialize Mixpanel using the initializeMixpanel function:"]},{"l":"Create a track function","p":["Then create a track function using the useTrackingFunction hook if the host application is in React:","Otherwise use the createTrackingFunction directly:"]},{"l":"Track an event","p":["Finally, using the retrieved track function, send a telemetry event:"]},{"l":"Track a link","p":["Link clicks requires to keep the page alive while the tracking request is being processed. To do so, set the keepAlive option of the track function:"]},{"l":"Set custom user events","p":["Most applications need to set custom properties on events about the current user environment. To help with that, @workleap/mixpanel expose the setSuperProperties function.","Update your application code to include the setSuperProperties function:","Now, every event recorded after the execution of setSuperProperties will include the custom property User Id."]},{"i":"try-it-rocket","l":"Try it \uD83D\uDE80","p":["Start the application in a development environment using the dev script. Render a page, then navigate to your Mixpanel instance. Go to \"Events\" page. If you are tracking events, you should see a new event appear.","You can try filtering the event list using different properties, such as:","User Id"]},{"l":"Troubleshoot issues","p":["If you are experiencing issues with this guide:","Set the verbose predefined option to true.","Open the DevTools console and look for logs starting with [mixpanel].","Refer to the sample on GitHub."]},{"l":"Filter by correlation ids","p":["The initializeMixpanel function automatically adds two properties to every event to unify Mixpanel with the other telemetry platforms:","Telemetry Id: Identifies a single application load. It's primarily used to correlate with Honeycomb traces.","Device Id: Identifies the user's device across sessions. This value is extracted from the shared wl-identity cookie, which is used across Workleap's marketing sites and web applications.","To correlate a session with other telemetry platforms, filter the session list using these user traits."]},{"l":"Migrate","p":["To benefit from the new integrated experience, follow the migration guide for v2.0."]}],[{"l":"Reference","p":["initializeMixpanel","createTrackingFunction","useTrackingFunction","setSuperProperties"]}],[{"l":"initializeMixpanel","p":["Initialize Mixpanel with Workleap's default settings."]},{"l":"Reference"},{"l":"Parameters","p":["productId: The product id.","envOrTrackingApiBaseUrl: The environment to get the navigation url from or a base URL.","options: An optional object literal of options:","trackingEndpoint: An optional tracking endpoint.","verbose: If no loggers are configured, verbose mode will automatically send logs to the console. In some cases, enabling verbose mode also produces additional debug information.","loggers: An optional array of RootLogger instances."]},{"l":"Environments","p":["Supported environments are:","production","staging","development","local","msw"]},{"l":"Usage"},{"l":"Initialize with a predefined environment","p":["Mixpanel can be initialized for any of the following predefined environments:","production","staging","development","local","msw"]},{"l":"Initialize with a base url"},{"l":"Use a custom tracking endpoint"},{"l":"Verbose mode"},{"l":"Loggers"}],[{"l":"createTrackingFunction","p":["Returns a function sending POST requests to a dedicated tracking endpoint fully compliant with the Workleap platform tracking API."]},{"l":"Reference"},{"l":"Parameters","p":["options: An optional object literal of options:","targetProductId: The product id of the target product. Useful to track an event for another product."]},{"l":"Returns","p":["A TrackingFunction with the following signature: (eventName, properties: {}, options?: { keepAlive }) = Promisevoid.","eventName: The event name.","properties: The event properties.","options: An optional object literal of options:","keepAlive: Whether or not to keep the connection alive for the tracking request. It is mostly used for tracking links where the user might navigate away before the request is completed.","The body size for keepalive requests is limited to 64 kibibytes."]},{"l":"Throws","p":["If the initializeMixpanel function hasn't been executed yet and the Mixpanel context is not available, an Error is thrown."]},{"l":"Usage"},{"l":"Track events"},{"l":"Specify a target product","p":["To track an action targeting another product, use the targetProductId option:"]},{"l":"Track a link","p":["To track a link click, use the keepAlive option to keep the page alive while the tracking request is being processed:"]}],[{"l":"useTrackingFunction","p":["Returns a function sending POST requests to a dedicated tracking endpoint fully compliant with the Workleap platform tracking API."]},{"l":"Reference"},{"l":"Parameters","p":["options: An optional object literal of options:","targetProductId: The product id of the target product. Useful to track an event for another product."]},{"l":"Returns","p":["A TrackingFunction with the following signature: (eventName, properties: {}, options?: { keepAlive }) = Promisevoid.","eventName: The event name.","properties: The event properties.","options: An optional object literal of options:","keepAlive: Whether or not to keep the connection alive for the tracking request. It is mostly used for tracking links where the user might navigate away before the request is completed.","The body size for keepalive requests is limited to 64 kibibytes."]},{"l":"Throws","p":["If the initializeMixpanel function hasn't been executed yet and the Mixpanel context is not available, an Error is thrown."]},{"l":"Usage"},{"l":"Track events"},{"l":"Specify a target product","p":["To track an action targeting another product, use the targetProductId option:"]},{"l":"Track a link","p":["To track a link click, use the keepAlive option to keep the page alive while the tracking request is being processed:"]}],[{"l":"setSuperProperties","p":["Super properties are global event properties that are defined once and automatically applied to all events. This is a custom implementation inspired by a similar pattern in Mixpanel."]},{"l":"Reference"},{"l":"Parameters","p":["properties: The properties to include in every event."]},{"l":"Returns","p":["Nothing"]},{"l":"Usage"}],[{"l":"Updating","p":["Migrate to v1.0","Migrate to v2.0"]}],[{"l":"Migrate to v1.0","p":["Follow this guide to migrate from @workleap-tracking/mixpanel\uD83D\uDC47"]},{"l":"Breaking changes","p":["The buildTrackingFunction function has been renamed to createTrackingFunction.","The createTrackingFunction function now accepts a new sets of arguments."]},{"l":"New function arguments","p":["The buildTrackingFunction function had multiple overloads, the new createTrackingFunction function has a single signature with an options object.","Before:","After:"]}],[{"l":"Migrate to v2.0","p":["This new version introduces two correlation ids, telemetryId and deviceId, to help unify and correlate data across LogRocket, Honeycomb and Mixpanel and a new automatic enrichment of the events with the LogRocket session url if the LogRocket instrumentation is registered.","To support these new automations, a new initializeMixpanel function has been introduced. This setup function should be called only once per load, during the application's bootstrap phase."]},{"l":"Breaking changes","p":["The initializeMixpanel function must be executed during the bootstrapping of the application and must be called prior to the useTrackingFunction hook or createTrackingFunction.","The createTrackingFunction signature do not include the productId and env arguments anymore.","Before:","After:","Or for a React application:"]},{"l":"Improvements"},{"l":"Correlation ids","p":["To help unify and correlate data across LogRocket, Honeycomb, and Mixpanel, the initializeMixpanel function now automatically adds two correlation ids as attributes to every event:","telemetryId is a new identifier that represents a single application load.","deviceId is an identifier that represents a single device across multiple loads."]},{"l":"Session URL enrichment","p":["A built-in integration now automatically allows other telemetry libraries to include the LogRocket session replay URL in their traces.","Once the LogRocket session URL is retrieved, each event is enriched with an LogRocket Session Url property:","Enrichment example"]},{"l":"Super properties","p":["You can now use a new function to add super properties, global event properties that are defined once and automatically included with all events:"]},{"l":"Migrate from v1.0","p":["Follow these steps to migrate an existing application v1.0 to v2.0:","Add the initializeMixpanel function to the bootstrapping code of the application.","Remove the productId and env arguments from createTrackingFunction.","If the host application is in React, consider replacing createTrackingFunction by the useTrackingFunction hook."]}],[{"l":"Samples","p":["All platforms sample"]}],[{"l":"Getting started","p":["To connect user activity across platforms and provide insight into community engagement and behavior, Workleap has adopted Common Room, a marketers platform that aggregates data from sources like social media, forums, and product tools to build unified user profiles.","This package provides default Common Room instrumentation for Workleap applications."]},{"l":"Install the packages","p":["First, open a terminal at the root of the application and install the following packages:"]},{"l":"Register instrumentation","p":["Then, register Common Room instrumentation using the registerCommonRoomInstrumentation function:"]},{"l":"Identify a user","p":["To associate the anonymous activities with an existing user, identify the current user using the identify function:"]},{"i":"try-it-rocket","l":"Try it \uD83D\uDE80","p":["Start the application in a development environment using the dev script. Go to the \"Identify\" page and press the button to identify the current user. Then navigate to your Common Room instance and go to the \"Activity\" page, you should see new data appear in the next 10 minutes.","Common Room activity entry"]},{"l":"Troubleshoot issues","p":["If you are experiencing issues with this guide:","Set the verbose predefined option to true.","Open the DevTools console and look for logs starting with [common-room].","Refer to the sample on GitHub."]},{"l":"Renew cookies","p":["If nothing else works, renewing the Common Room cookies with new user id and session id values may help.","To do this, open the browser's developer tools, navigate to Application> Storage> Cookies, select the relevant site, and delete the signals-sdk-session-id and signals-sdk-user-id cookies.","Finally, refresh the page to generate new cookies.","Common Room cookies"]}],[{"l":"Reference","p":["registerCommonRoomInstrumentation","identify"]}],[{"l":"registerCommonRoomInstrumentation","p":["Initialize Common Room instrumentation."]},{"l":"Reference"},{"l":"Parameters","p":["siteId: The site id.","options: An optional object literal of options:","verbose: If no loggers are configured, verbose mode will automatically send logs to the console. In some cases, enabling verbose mode also produces additional debug information.","loggers: An optional array of RootLogger instances."]},{"l":"Returns","p":["Nothing"]},{"l":"Usage"},{"l":"Initialize with a site id"},{"l":"Verbose mode"},{"l":"Loggers"}],[{"l":"identify","p":["Identify a Common Room user session using an email address. Once identified, any previous anonymous traces that share the same user id and session id will be linked to the email address. Additionally, any existing data associated with that email address will be attached to the current session."]},{"l":"Reference"},{"l":"Parameters","p":["emailAddress: The user email address."]},{"l":"Returns","p":["Nothing"]},{"l":"Usage"}],[{"l":"Samples","p":["All platforms sample"]}],[{"l":"About","p":["To ask a question or propose an idea, feel free to start a new discussion on Github. If you found a bug, please open an issue on Github."]},{"l":"Contributing","p":["Have a look at the contributor's documentation."]},{"l":"License","p":["See the LICENSE on Github."]}]]